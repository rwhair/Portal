set client_min_messages = warning;

drop extension if exists pgcrypto;
create extension pgcrypto;

drop table if exists portal_request cascade;
create table portal_request (
	request_id 								bigserial primary key,
	request_code							varchar not null,
	request_hash 							varchar unique not null,
	request_timestamp						timestamptz,
	records_patient_first_name 				varchar,
	records_patient_last_name				varchar,
	records_patient_aka						varchar,
	records_patient_dob						date,
	records_patient_ssn						varchar,
	records_patient_email					varchar,
	records_patient_phone_number			varchar,
	records_recipient						varchar,
	records_start_date						varchar,
	records_end_date						varchar,
	records_info_requested					varchar,
	records_reason_for_release				varchar,
	records_specific_info_requested			varchar,
	records_delivery_method					varchar,
	records_timeframe						varchar,
	recipient_doctor_facility				varchar,
	recipient_doctor_first_name				varchar,
	recipient_doctor_last_name				varchar,
	recipient_doctor_fax					varchar,
	recipient_doctor_email					varchar,
	recipient_doctor_address				varchar,
	recipient_doctor_address_line_2			varchar,
	recipient_doctor_city 					varchar,
	recipient_doctor_state 					varchar,
	recipient_doctor_zip_code				varchar,
	recipient_third_party_company			varchar,
	recipient_third_party_first_name		varchar,
	recipient_third_party_last_name			varchar,
	recipient_third_party_fax				varchar,
	recipient_third_party_email				varchar,
	recipient_third_party_address			varchar,
	recipient_third_party_address_line_2	varchar,
	recipient_third_party_city				varchar,
	recipient_third_party_state				varchar,
	recipient_third_party_zip_code			varchar,
	records_doctor_facility 				varchar,
	records_doctor_first_name 				varchar,
	records_doctor_last_name 				varchar,
	records_doctor_phone_number				varchar,
	records_doctor_fax 						varchar,
	records_doctor_address 					varchar,
	records_doctor_address_line_2 			varchar,
	records_doctor_city 					varchar,
	records_doctor_state 					varchar,
	records_doctor_zip_code 				varchar,	
	payment_type 							varchar,
	payment_amount 							decimal
);

drop procedure if exists json_insert_portal_request(text, timestamptz, text) cascade;
create or replace procedure json_insert_portal_request(text, timestamptz, text) as
$$
	insert into portal_request(
		request_code, request_hash, request_timestamp,
		records_recipient, records_start_date, records_end_date, 
		records_info_requested, records_reason_for_release, records_specific_info_requested, 
		records_delivery_method, records_timeframe, 
		recipient_doctor_facility, recipient_doctor_first_name, recipient_doctor_last_name, 
		recipient_doctor_fax, recipient_doctor_email, 
		recipient_doctor_address, recipient_doctor_address_line_2, 
		recipient_doctor_city, recipient_doctor_state, recipient_doctor_zip_code, 
		recipient_third_party_company, recipient_third_party_first_name, recipient_third_party_last_name,
		recipient_third_party_fax, recipient_third_party_email, 
		recipient_third_party_address, recipient_third_party_address_line_2, 
		recipient_third_party_city, recipient_third_party_state, recipient_third_party_zip_code, 
		records_doctor_facility, records_doctor_first_name, records_doctor_last_name, 
		records_doctor_phone_number, records_doctor_fax, 
		records_doctor_address, records_doctor_address_line_2,
		records_doctor_city, records_doctor_state, records_doctor_zip_code, 
		payment_type, payment_amount
	)
	select
		$1,
		encode(digest($1 || ((t->'patient')->>'firstName') || ((t->'patient')->>'lastName') || ($2 :: text), 'sha256'), 'hex'),
		$2,
		(t->'records')->>'recipient',
		((t->'records')->>'startDate'),
		((t->'records')->>'endDate'),
		(t->'records')->'infoRequested',
		(t->'records')->'reasonForRelease',
		(t->'records')->'specificInfoRequested',
		(t->'records')->'deliveryMethod',
		(t->'records')->'timeframe',
		((t->'records')->'doctor')->>'facility',
		((t->'records')->'doctor')->>'firstName',
		((t->'records')->'doctor')->>'lastName',
		((t->'records')->'doctor')->>'fax',
		((t->'records')->'doctor')->>'email',
		((t->'records')->'doctor')->>'address',
		((t->'records')->'doctor')->>'addressLine2',
		((t->'records')->'doctor')->>'city',
		((t->'records')->'doctor')->>'state',
		((t->'records')->'doctor')->>'zipCode',
		((t->'records')->'thirdParty')->>'company',
		((t->'records')->'thirdParty')->>'firstName',
		((t->'records')->'thirdParty')->>'lastName',
		((t->'records')->'thirdParty')->>'phoneNumber',
		((t->'records')->'thirdParty')->>'fax',
		((t->'records')->'thirdParty')->>'address',
		((t->'records')->'thirdParty')->>'addressLine2',
		((t->'records')->'thirdParty')->>'city',
		((t->'records')->'thirdParty')->>'state',
		((t->'records')->'thirdParty')->>'zipCode',
		(t->'doctor')->>'facility',
		(t->'doctor')->>'firstName',
		(t->'doctor')->>'lastName',
		(t->'doctor')->>'phoneNumber',
		(t->'doctor')->>'fax',
		(t->'doctor')->>'address',
		(t->'doctor')->>'addressLine2',
		(t->'doctor')->>'city',
		(t->'doctor')->>'state',
		(t->'doctor')->>'zipCode',
		((t->'summary')->'payment')->>'type',
		((((t->'summary')->'payment')->'bankTransfer')->>'amount') :: decimal
	from (select ($3 :: json) t) req
	on conflict do nothing
$$ language sql;